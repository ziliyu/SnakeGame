import { DispatcherBase, EventListBase } from "ste-core";
import { ISignal, ISignalHandler, ISignalHandling } from "./definitions";
/**
 * The dispatcher handles the storage of subsciptions and facilitates
 * subscription, unsubscription and dispatching of a signal event.
 */
export declare class SignalDispatcher extends DispatcherBase<ISignalHandler> implements ISignal {
    /**
     * Creates a new SignalDispatcher instance.
     */
    constructor();
    /**
     * Dispatches the signal.
     */
    dispatch(): void;
    /**
     * Dispatches the signal threaded.
     */
    dispatchAsync(): void;
    /**
     * Creates an event from the dispatcher. Will return the dispatcher
     * in a wrapper. This will prevent exposure of any dispatcher methods.
     */
    asEvent(): ISignal;
}
/**
 * Storage class for multiple signal events that are accessible by name.
 * Events dispatchers are automatically created.
 */
export declare class SignalList extends EventListBase<SignalDispatcher> {
    /**
     * Creates a new SignalList instance.
     */
    constructor();
    /**
     * Creates a new dispatcher instance.
     */
    protected createDispatcher(): SignalDispatcher;
}
/**
 * Extends objects with signal event handling capabilities.
 */
export declare abstract class SignalHandlingBase implements ISignalHandling {
    private _events;
    protected get events(): SignalList;
    /**
     * Subscribes once to the event with the specified name.
     * @param name The name of the event.
     * @param fn The event handler.
     */
    one(name: string, fn: ISignalHandler): void;
    /**
     * Checks it the event has a subscription for the specified handler.
     * @param name The name of the event.
     * @param fn The event handler.
     */
    has(name: string, fn: ISignalHandler): boolean;
    /**
     * Subscribes to the event with the specified name.
     * @param name The name of the event.
     * @param fn The event handler.
     */
    subscribe(name: string, fn: ISignalHandler): void;
    /**
     * Subscribes to the event with the specified name.
     * @param name The name of the event.
     * @param fn The event handler.
     */
    sub(name: string, fn: ISignalHandler): void;
    /**
     * Unsubscribes from the event with the specified name.
     * @param name The name of the event.
     * @param fn The event handler.
     */
    unsubscribe(name: string, fn: ISignalHandler): void;
    /**
     * Unsubscribes from the event with the specified name.
     * @param name The name of the event.
     * @param fn The event handler.
     */
    unsub(name: string, fn: ISignalHandler): void;
}
